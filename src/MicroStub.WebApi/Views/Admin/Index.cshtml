@model MicroStub.WebApi.Models.AdminModel
@{ 
    var data = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data));
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Micro Stub Admin Panel</title>

    <!-- Foundation CSS framework (Bootstrap and jQueryUI also supported) -->
    <link rel='stylesheet' href='//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css'>
    <!-- Font Awesome icons (Bootstrap, Foundation, and jQueryUI also supported) -->
    <link rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css'>
    <script src="~/js/jsoneditor.js"></script>
    <script src="https://code.jquery.com/jquery-3.1.0.min.js" integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=" crossorigin="anonymous"></script>
    <script>
    // Set the default CSS theme and icon library globally
    JSONEditor.defaults.theme = 'bootstrap3';
    JSONEditor.defaults.iconlib = 'fontawesome4';
    </script>
</head>
<body>
    <div class='row'>
        <div class='medium-12-columns'>
            <button id='submit' class='tiny'>Save</button>
            <button id='restore' class='secondary tiny'>Restore to Default</button>
            <span id='valid_indicator' class='label'></span>
        </div>
    </div>
    <div class='row'>
        <div id='editor_holder' class='medium-12 columns'></div>
    </div>

    <script>
      // This is the starting value for the editor
      // We will use this to seed the initial editor
      // and to provide a "Restore to Default" button.
        var starting_value = @data;

      // Initialize the editor
      var editor = new JSONEditor(document.getElementById('editor_holder'),{
        // Enable fetching schemas via ajax
          ajax: true,
          disable_collapse: true,
          disable_edit_json: true,
          disable_properties: true,

        // The schema for the editor
        schema: {
          $ref: "/js/schema.json",
          format: ""
        },

        // Seed the form with a starting value
        startval: starting_value
      });

      // Hook up the submit button to log to the console
      document.getElementById('submit').addEventListener('click',function() {
          // Get the value from the editor
          $.post( "/admin/save", editor.getValue() );
          
      });

      // Hook up the Restore to Default button
      document.getElementById('restore').addEventListener('click',function() {
        editor.setValue(starting_value);
      });

      // Hook up the validation indicator to update its
      // status whenever the editor changes
      editor.on('change',function() {
        // Get an array of errors from the validator
        var errors = editor.validate();

        var indicator = document.getElementById('valid_indicator');

        // Not valid
        if(errors.length) {
          indicator.className = 'label alert';
          indicator.textContent = 'not valid';
        }
        // Valid
        else {
          indicator.className = 'label success';
          indicator.textContent = 'valid';
        }
      });
    </script>
</body>
</html>
